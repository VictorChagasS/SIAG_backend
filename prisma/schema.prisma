// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para o tipo de fórmula de cálculo de média
enum TypeFormula {
  simple
  personalized
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  isAdmin       Boolean    @default(false)
  currentPeriod String?    @default(dbgenerated("CONCAT(EXTRACT(YEAR FROM CURRENT_DATE)::TEXT, '.', CASE WHEN EXTRACT(MONTH FROM CURRENT_DATE) > 6 THEN '2' ELSE '1' END)")) // Período atual do usuário (ex: "2025.2")
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  classes       Class[]    @relation("TeacherClasses")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([institutionId])

  @@map("users")
}

model Institution {
  id      String @id // Código da IES
  name    String @unique
  acronym String? // Institution acronym (e.g., UFMG, USP)
  users   User[]

  @@index([name])
  @@index([acronym])

  @@map("institutions")
}

model Class {
  id        String   @id @default(uuid())
  name      String
  code      String?   // Código da turma
  section   Int      @default(1)  // Número da turma, por padrão é 1
  period    String   // Período no formato "year.period" (ex: "2025.2")
  teacher   User     @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  typeFormula TypeFormula @default(simple) // Tipo de fórmula: simples ou personalizada
  averageFormula String?  // Fórmula personalizada para cálculo da média da turma
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relações com unidades e estudantes
  units     Unit[]
  students  Student[]

  @@index([teacherId])
  @@index([period])
  @@index([code])
  @@index([section])

  @@map("classes")
}

// Modelo para representar um estudante em uma turma
model Student {
  id          String   @id @default(uuid())
  name        String
  email       String?
  registration String   // Matrícula ou identificação do estudante
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relação com notas
  grades      Grade[]

  @@unique([registration, classId]) // Um estudante só pode estar matriculado uma vez em cada turma
  @@index([registration])
  @@index([classId])

  @@map("students")
}

// Modelo para representar uma unidade de uma turma
model Unit {
  id            String   @id @default(uuid())
  name          String
  class         Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId       String
  typeFormula   TypeFormula @default(simple) // Tipo de fórmula: simples ou personalizada
  averageFormula String?   // Fórmula personalizada para cálculo da média da unidade
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relação com itens avaliativos
  evaluationItems EvaluationItem[]

  @@index([classId])

  @@map("units")
}

// Modelo para representar um item avaliativo de uma unidade
model EvaluationItem {
  id            String   @id @default(uuid())
  name          String
  unit          Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relação com notas
  grades        Grade[]

  @@index([unitId])

  @@map("evaluation_items")
}

// Modelo para representar a nota de um estudante em um item avaliativo
model Grade {
  id                String         @id @default(uuid())
  student           Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  evaluationItem    EvaluationItem @relation(fields: [evaluationItemId], references: [id], onDelete: Cascade)
  evaluationItemId  String
  value             Float
  comments          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([studentId, evaluationItemId]) // Um estudante só pode ter uma nota para cada item avaliativo
  @@index([studentId])
  @@index([evaluationItemId])

  @@map("grades")
}
