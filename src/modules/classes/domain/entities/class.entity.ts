/**
 * Type definition for formula calculation approaches
 *
 * - 'simple': Uses the default system formula for grade calculation
 * - 'personalized': Uses a custom formula defined by the teacher
 *
 * @type ITypeFormula
 */
export type ITypeFormula = 'simple' | 'personalized';

/**
 * Class (Course) Entity
 *
 * Represents an academic class in the system with all its properties and behavior.
 * A class is a course instance taught by a specific teacher in a specific period.
 *
 * @class Class
 */
export class Class {
  /**
   * Unique identifier for the class
   * Auto-generated by the database
   */
  id?: string;

  /**
   * Name of the class/course
   * Required field
   */
  name: string;

  /**
   * Course code/identifier
   * Optional field
   */
  code?: string;

  /**
   * Section number of the class
   * Default is 1 if not specified
   */
  section?: number; // Número da turma, por padrão é 1

  /**
   * Academic period when the class is offered
   * Format: "year.period" (e.g., "2025.2")
   */
  period: string; // Formato: "year.period" (ex: "2025.2")

  /**
   * ID of the teacher assigned to the class
   * Required field
   */
  teacherId: string;

  /**
   * Custom formula for calculating class averages
   * Only used when typeFormula is 'personalized'
   */
  averageFormula?: string; // Fórmula personalizada para cálculo da média da turma

  /**
   * Type of formula used for grade calculation
   * Default is 'simple'
   */
  typeFormula: ITypeFormula = 'simple'; // Tipo de fórmula: simples ou personalizada

  /**
   * Number of students enrolled in the class
   * Calculated field, not stored directly
   */
  studentCount?: number; // Contagem de estudantes na turma

  /**
   * Timestamp when the class was created
   * Auto-generated by the database
   */
  createdAt?: Date;

  /**
   * Timestamp when the class was last updated
   * Auto-generated by the database
   */
  updatedAt?: Date;

  /**
   * Creates a new Class instance
   *
   * @param {Object} props - The properties to initialize the class with
   * @param {string} props.name - The name of the class
   * @param {string} props.period - The academic period
   * @param {string} props.teacherId - The teacher's ID
   * @param {string} [props.code] - Optional course code
   * @param {number} [props.section] - Optional section number (defaults to 1)
   * @param {string} [props.averageFormula] - Optional custom formula for grade calculation
   */
  constructor(props: Omit<Class, 'createdAt' | 'updatedAt' | 'studentCount' | 'typeFormula'> & { section?: number }) {
    Object.assign(this, props);

    // Se averageFormula estiver definido, definir typeFormula como 'personalized', caso contrário como 'simple'
    if (props.averageFormula) {
      this.typeFormula = 'personalized';
    } else {
      this.typeFormula = 'simple';
    }

    // Define o valor padrão para section se não for fornecido
    if (props.section === undefined || props.section === null) {
      this.section = 1;
    } else {
      this.section = props.section;
    }
  }
}
